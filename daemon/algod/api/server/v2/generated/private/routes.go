// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
