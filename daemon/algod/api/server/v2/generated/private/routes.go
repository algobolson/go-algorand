// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eLCtWPReAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
